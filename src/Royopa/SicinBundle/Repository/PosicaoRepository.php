<?php

namespace Royopa\SicinBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Royopa\SicinBundle\Entity\Posicao;

/**
 * PosicaoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PosicaoRepository extends EntityRepository
{
    /**
     * Pega a posição do mês anterior à posição informada
     *
     * @return Posicao
     */
    public function getPosicaoAnterior($posicao)
    {
        $query = $this->createQueryBuilder('p');
        //instituicao financeira
        $query
            ->andWhere('p.instituicaoFinanceira = :instituicaoFinanceira')
            ->setParameter('instituicaoFinanceira', $posicao->getInstituicaoFinanceira());
        //ativo
        $query
            ->andWhere('p.ativo = :ativo')
            ->setParameter('ativo', $posicao->getAtivo());

        $date = new \DateTime($posicao->getDataReferencia()->format('Y-m-d'));
        //intervalo de um mês
        $interval = new \DateInterval('P1D');
        $date->sub($interval);

        //data referência anterior (a última disponível)
        $query
            ->andWhere('p.dataReferencia < :dataReferencia')
            ->setParameter('dataReferencia', $date->format('Y-m-d'));

        $query->orderBy('p.dataReferencia', 'DESC');

        $query->setMaxResults(1);

        try {
            return $query
                        ->getQuery()
                        ->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return new Posicao();
        }
    }

    /**
     * Pega a posição do mês anterior à posição informada
     *
     * @return array[]
     */
    public function findPosicaoSintetica($mes, $ano)
    {
        $mes;
        $ano;

        $query = $this->createQueryBuilder('s')
            ->leftJoin('s.ativo', 'a')
            ->leftJoin('a.tipo', 't');

        $query->select(
            's.dataReferencia,
            t.nome,
            t.id,
            SUM(s.valorProvento) AS valorProvento,
            SUM(s.valorMercado) AS valorMercado,
            SUM(s.valorBrutoTotal) AS valorBrutoTotal,
            SUM(s.valorLiquidoTotal) AS valorLiquidoTotal'
        );

        $string = "$ano-$mes-";
        $query
            ->andWhere('s.dataReferencia LIKE :data')
            ->setParameter('data', $string.'%');

        $qy=$query->getQuery();
        $sql=$qy->getSQL();

        $query->groupBy('t.nome');
        $query->orderBy('valorLiquidoTotal', 'DESC');

        return $query->getQuery()->getResult();
    }
}
